steps:
  # Step that may or may not exist based on conditions
  - label: ":white_check_mark: Conditional step"
    key: "conditional-step"
    command: |
      echo "This step runs conditionally"
      echo "For demo, this step exists"
    if_changed: "conditional.yml"  # Only runs if markdown files changed

  # Step that checks if another step exists before proceeding
  - label: ":mag: Check and proceed based on step existence"
    key: "smart-dependent"
    command: |
      echo "Checking if conditional-step exists..."
      
      # Try to get the step key - if it exists, we get the key back
      STEP_KEY=$(buildkite-agent step get "key" --step "conditional-step" 2>/dev/null || echo "")
      
      if [ -n "$STEP_KEY" ]; then
        echo "✅ Step 'conditional-step' exists with key: $STEP_KEY"
        echo "Proceeding with dependent logic..."
        # Your dependent step logic here
      else
        echo "❌ Step 'conditional-step' does not exist or was skipped"
        echo "Skipping dependent logic"
      fi
    depends_on: "always-present-step"  # Depend on a step that always exists

  # Always present step to ensure smart-dependent can run
  - label: ":anchor: Always present step"
    key: "always-present-step"
    command: |
      echo "This step always runs first"
      echo "Provides a reliable dependency point"

  # Alternative approach: Check multiple steps
  - label: ":telescope: Check multiple dependencies"
    command: |
      echo "Checking multiple potential dependencies..."
      
      # Check first potential dependency
      STEP1=$(buildkite-agent step get "key" --step "conditional-step" 2>/dev/null || echo "")
      STEP2=$(buildkite-agent step get "key" --step "missing-step" 2>/dev/null || echo "")
      
      echo "conditional-step exists: $([ -n '$STEP1' ] && echo 'YES' || echo 'NO')"
      echo "missing-step exists: $([ -n '$STEP2' ] && echo 'YES' || echo 'NO')"
      
      # Proceed based on which steps exist
      if [ -n "$STEP1" ] && [ -n "$STEP2" ]; then
        echo "Both dependencies exist - full workflow"
      elif [ -n "$STEP1" ]; then
        echo "Only conditional-step exists - partial workflow"
      else
        echo "No dependencies exist - minimal workflow"
      fi
    depends_on: "always-present-step"
